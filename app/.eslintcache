[{"D:\\Home\\student_managment\\client\\src\\index.js":"1","D:\\Home\\student_managment\\client\\src\\App.js":"2","D:\\Home\\student_managment\\client\\src\\reportWebVitals.js":"3","D:\\Home\\student_managment\\client\\src\\component\\box_plot_chart.js":"4","D:\\Home\\student_managment\\client\\src\\component\\line_chart.js":"5","D:\\Home\\student_managment\\client\\src\\component\\nav.js":"6","D:\\Home\\student_managment\\client\\src\\api\\chart.js":"7","D:\\Home\\student_managment\\client\\src\\api\\config.js":"8","D:\\Home\\student_managment\\client\\src\\helper\\app.js":"9","D:\\Home\\student_managment\\client\\src\\component\\third_question.js":"10"},{"size":546,"mtime":1611133648110,"results":"11","hashOfConfig":"12"},{"size":1612,"mtime":1611476737325,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":3307,"mtime":1611474130031,"results":"15","hashOfConfig":"12"},{"size":2986,"mtime":1611558424801,"results":"16","hashOfConfig":"12"},{"size":4662,"mtime":1611476961644,"results":"17","hashOfConfig":"12"},{"size":581,"mtime":1611417050099,"results":"18","hashOfConfig":"12"},{"size":44,"mtime":1611477834387,"results":"19","hashOfConfig":"12"},{"size":7190,"mtime":1611475547531,"results":"20","hashOfConfig":"12"},{"size":2795,"mtime":1611484023547,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"9aeaf0",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"24"},"D:\\Home\\student_managment\\client\\src\\index.js",[],["49","50"],"D:\\Home\\student_managment\\client\\src\\App.js",["51","52"],"\nimport './App.css';\nimport BoxPlotChart from './component/box_plot_chart';\nimport LineChart from './component/line_chart';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Alert from 'react-bootstrap/Alert';\nimport ThirdQuestion from './component/third_question';\nimport { Container, Row, Col, Spinner } from 'react-bootstrap';\nimport Navigation from './component/nav';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n\n        <Route path=\"/\" exact component={BoxPlotChart} />\n        <Route path=\"/q1/\" component={BoxPlotChart} />\n        <Route path=\"/q2/\" component={LineChart} />\n        <Route path=\"/q3\" component={ThirdQuestion} />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nconst Home = () => (\n\n  <div>\n    <Container fluid>\n      <Row>\n        <Col sm={2} id=\"sidebar-wrapper\">\n          <Navigation />\n        </Col>\n        <Col sm={10} id=\"page-content-wrapper\">\n          <Alert variant=\"success\">\n            <Alert.Heading>Hey, nice to see you</Alert.Heading>\n            <p>\n              Aww yeah, you successfully read this important alert message. This example\n              text is going to run a bit longer so that you can see how spacing within an\n              alert works with this kind of content.\n            </p>\n            <hr />\n            <p className=\"mb-0\">\n              Whenever you need to, be sure to use margin utilities to keep things nice\n              and tidy.\n            </p>\n          </Alert>\n\n        </Col>\n\n      </Row>\n    </Container>\n\n  </div>\n);\n\nexport default App;\n","D:\\Home\\student_managment\\client\\src\\reportWebVitals.js",[],"D:\\Home\\student_managment\\client\\src\\component\\box_plot_chart.js",["53","54","55","56","57"],"import ReactHighchart from 'react-highcharts';\r\nimport HighchartMore from 'highcharts/highcharts-more';\r\nimport chartApi from '../api/chart'\r\nimport { Container, Row, Col, Spinner } from 'react-bootstrap';\r\nimport React, { Component } from \"react\";\r\nimport Navigation from '../component/nav';\r\nimport App from '../helper/app';\r\nimport '../App.css'\r\n\r\nHighchartMore(ReactHighchart.Highcharts);\r\n\r\nexport default class BoxPlotChart extends Component {\r\n    state = {\r\n        filterVal: { student: 1, year: 2010, subjects: [\"Subject1\", \"Subject2\", \"Subject3\", \"Subject4\", \"Subject5\"] },\r\n        charData: App.boxPlotChart({}),\r\n        loading: false\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.filterData();\r\n    }\r\n    getStudentId = (studentId) => {\r\n        this.state.filterVal.student = studentId\r\n    };\r\n    getyear = (year) => {\r\n        this.state.filterVal.year = year;\r\n    }\r\n    getSubject = (subjects) => {\r\n        this.state.filterVal.subjects = subjects;\r\n    }\r\n    getFilterData = () => {\r\n        this.filterData();\r\n    }\r\n    filterData = () => {\r\n        this.setState({ loading: true });\r\n\r\n        chartApi.getStudentDataWithYearAndSubjectFilter({ year: this.state.filterVal.year, subjects: this.state.filterVal.subjects }).then(data => {\r\n            this.setState({ loading: false });\r\n\r\n            if (data != undefined &&  data.data && data.data.result) {\r\n                let preparedData = App.groupBySubject(data.data.result);\r\n                let subjects = [];\r\n                let marks = [];\r\n                let everyStudentMarks = App.prepareMarksPoints(preparedData);\r\n                for (let i = 0; i < preparedData.length; i++) {\r\n                    let sortedMarks = App.sortByMarks(preparedData[i].marks);\r\n                    subjects.push(preparedData[i].name);\r\n                    marks.push([sortedMarks[0], App.q25(sortedMarks), App.q50(sortedMarks), App.q75(sortedMarks), sortedMarks[19]])\r\n                }\r\n                //Update the chart for new data\r\n                let chart = this.refs.chart.getChart();\r\n                var series = chart.series[0];\r\n                series.setData(marks, false);\r\n                chart.series[1].setData(everyStudentMarks);\r\n                chart.xAxis[0].setCategories(subjects);\r\n                chart.redraw();\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col sm={2} id=\"sidebar-wrapper\">\r\n                        <Navigation clickStudent={this.getStudentId} clickFilter={this.getFilterData} clickYear={this.getyear} clickSubject={this.getSubject} />\r\n                    </Col>\r\n                    <Col sm={10} id=\"page-content-wrapper\">\r\n                        {this.state.loading ?\r\n\r\n                            <Spinner animation=\"border\" role=\"status\" className=\"loading_center\" size=\"50\">\r\n                                <span className=\"sr-only \">Loading...</span>\r\n                            </Spinner> :\r\n                            <ReactHighchart config={this.state.charData} ref=\"chart\" />\r\n                        }\r\n\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n","D:\\Home\\student_managment\\client\\src\\component\\line_chart.js",["58","59","60","61","62","63","64"],"D:\\Home\\student_managment\\client\\src\\component\\nav.js",["65","66","67","68"],"\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, Button, DropdownButton, Dropdown, Nav, NavItem, Container } from 'react-bootstrap';\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport React, { useState } from 'react';\r\n\r\nconst Navigation = (props) => {\r\n    \r\n    const [year, setYear] = useState(1);    \r\n    const [student,setStudent] = useState(1);\r\n    // setYear(2010)\r\n    let array = [];\r\n    for (let i = 0; i < 20; i++) {\r\n        array.push(\r\n            <Dropdown.Item eventKey={i + 1} onClick={() => props.clickStudent(i + 1)}>Student {i + 1}</Dropdown.Item>\r\n        );\r\n    };\r\n    let yearArray = [];\r\n    for (let i = 0; i < 10; i++) {\r\n        yearArray.push(\r\n            <Dropdown.Item eventKey={2010+i} onClick={() => props.clickYear(2010+i)}>201{i}</Dropdown.Item>\r\n        );\r\n    };\r\n    //prepare subject array\r\n    let subjectArray = [];\r\n    for(let i = 1; i < 100; i++){\r\n        subjectArray.push({name: 'Subject'+i, id: i})\r\n    }\r\n    let state = {\r\n        options:subjectArray,\r\n        selectedValue:[{name: 'Subject1', id: 1},{name: 'Subject2', id: 2},{name: 'Subject3', id: 3},{name: 'Subject4', id: 4},{name: 'Subject5', id: 5}]\r\n    };\r\n\r\n    function onSelect(selectedList,selectedVal){\r\n        console.info(selectedVal);\r\n        let subjectTemArray = [];\r\n        for(let i = 0; i < selectedList.length; i++){\r\n            subjectTemArray.push(selectedList[i].name);\r\n        }\r\n        props.clickSubject(subjectTemArray);\r\n    }\r\n\r\n    function onRemove(selectedList,selectedVal){\r\n        let subjectTemArray = [];\r\n        for(let i = 0; i < selectedList.length; i++){\r\n            subjectTemArray.push(selectedList[i].name);\r\n        }\r\n        props.clickSubject(subjectTemArray);\r\n    }\r\n\r\n    const selectStudent = (e) => {\r\n        setStudent(e)\r\n    }\r\n    const selectYear = (e) => {\r\n        console.info(e);\r\n        setYear(e)\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            <Nav className=\"col-md-12 d-none d-md-block bg-light sidebar\"  activeKey=\"/home\">\r\n                <div className=\"sidebar-sticky\"></div>\r\n                <Nav.Item>\r\n                    {/* <Nav.Link to=\"/box_chart\">Plot chart</Nav.Link> */}\r\n                    <Container fluid>\r\n                        <div className=\" row\">\r\n                            <div className=\"col-4\">\r\n                                <Link to=\"/q1\"><Button variant=\"secondary\">Q1</Button></Link>\r\n                            </div>\r\n                            <div className=\"col-4\">\r\n                                <Link to=\"/q2\"><Button variant=\"secondary\">Q2</Button></Link>\r\n                            </div>\r\n                            <div className=\"col-4\">\r\n                                <Link to=\"/q3\"><Button variant=\"secondary\">Q3</Button></Link>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </Container>\r\n\r\n                </Nav.Item>\r\n\r\n                <Nav.Item className=\"pt-5\" >\r\n\r\n                    <b>Select Student</b>\r\n                    <div className=\"row px-5\">\r\n                        <DropdownButton btn btn-block title={\"Student \" + student} id=\"dropdown-basic-button\"\r\n                            onSelect={selectStudent}>\r\n                            {array}\r\n                        </DropdownButton>\r\n                    </div>\r\n\r\n                </Nav.Item>\r\n                <Nav.Item className=\"pt-2\">\r\n                    <b>Select Year</b>\r\n                    <div className=\"row px-5\">\r\n                        <DropdownButton btn btn-block title={year==1?2010:year} id=\"basic-nav-dropdown\" onSelect={selectYear}>\r\n\r\n\r\n                            {yearArray}\r\n                        </DropdownButton>\r\n                    </div>\r\n\r\n                </Nav.Item>\r\n                <Nav.Item className=\"pt-3\">\r\n                <b>Select Subjects</b>\r\n                    <div className=\"row px-5 \">\r\n                        <Multiselect\r\n                            options={state.options}\r\n                            selectedValues={state.selectedValue}\r\n                            onSelect={onSelect}\r\n                            onRemove={onRemove}\r\n                            displayValue=\"name\" />\r\n                    </div>\r\n\r\n                </Nav.Item>\r\n                <Nav.Item className=\"pt-3\">\r\n                    <div className=\"row px-5\">\r\n                        <Button className=\"btn btn-block \" variant=\"outline-primary\" onClick={() => props.clickFilter()}>Filter</Button>\r\n                    </div>\r\n                </Nav.Item>\r\n            </Nav>\r\n\r\n        </>\r\n\r\n    );\r\n}\r\nexport default Navigation; ","D:\\Home\\student_managment\\client\\src\\api\\chart.js",["69"],"import axios from 'axios';\r\nimport config from './config'\r\nconst baseUrl = \"http://localhost:9000/api/v1\";\r\nexport default class ChartApi {\r\n\r\n\tstatic getStudentDataWithYearAndSubjectFilter(data) {\r\n\t\treturn axios.post(baseUrl+\"/student/filter\",data)\r\n\t\t.then(res => {\r\n\t\t\treturn res;\r\n\t\t}).catch(err=> {\r\n\t\t\treturn err;\r\n\t\t});\r\n\t}\r\n\r\n\tstatic getStudentDataByStudentId(studentId) {\r\n\t\treturn axios.get(baseUrl+'/student/'+studentId,{headers:{\"Content-Type\": \"application/json; charset=utf-8\"}})\r\n\t\t.then(res => {\r\n\t\t\treturn res;\r\n\t\t}).catch(err=> {\r\n\t\t\t// return err;\r\n\t\t});\r\n\t}\r\n}","D:\\Home\\student_managment\\client\\src\\api\\config.js",[],"D:\\Home\\student_managment\\client\\src\\helper\\app.js",["70"],"export default class App{     \r\n    //group by subject\r\n    static groupBySubject = (data) => {    \r\n        let subjectArray = [];\r\n        for(let i = 0; i < data.length; i++){\r\n            let subjectIndex = subjectArray.findIndex(subjectArray=>subjectArray.name===data[i].subject);\r\n            if(subjectIndex>=0){\r\n                subjectArray[subjectIndex][\"data\"].push(data[i]);\r\n                subjectArray[subjectIndex][\"marks\"].push(data[i].mark);\r\n            }else{\r\n                subjectArray.push({name:data[i].subject,data:[data[i]],marks:[data[i].mark]})\r\n            }\r\n        }\r\n        return subjectArray;\r\n    }\r\n    //sort by student marks\r\n    static sortByMarks = (data) => {\r\n        return data.sort((a, b) => a - b);\r\n    }\r\n    //find avarage marks for subject\r\n    static findAvarage(data){\r\n        return (data.reduce((a, b) => a + b, 0)/data.length);\r\n    }\r\n\r\n    //find student mrkes\r\n    static findStudentMark(data,studentId){\r\n        for(let i = 0; i < data.length; i++){\r\n            if(data[i].studentId === parseInt( studentId)){\r\n                return data[i].mark;\r\n                break;\r\n            }          \r\n        }\r\n        return 0;\r\n    }\r\n   \r\n    //q25\r\n    static q25 = (arr) => {return  quantile(arr,0.25)};\r\n    //q50\r\n    static q50 = (arr) => {return  quantile(arr,0.50)};\r\n    //q75\r\n    static q75 = (arr) => {return  quantile(arr,0.75)}; \r\n    \r\n    //prepare box lot data\r\n    static boxPlotChart(data){\r\n        return {\r\n            chart: {\r\n                type: 'boxplot'\r\n            },\r\n    \r\n            title: {\r\n                text: 'Subject with marks'\r\n            },\r\n    \r\n            legend: {\r\n                enabled: true\r\n            },\r\n    \r\n            xAxis: {\r\n                categories: ['Subject 1', 'Subject 2', 'Subject 3', 'Subject 4', 'Subject 5'],\r\n                title: {\r\n                    text: 'Subject Name'\r\n                }\r\n            },\r\n    \r\n            yAxis: {\r\n                title: {\r\n                    text: 'Marks'\r\n                }\r\n            },\r\n            tooltip: {\r\n                formatter: function() {\r\n                  if (this.series.userOptions.type === 'scatter') {\r\n                    return 'Marks '+this.y + '';\r\n                  } else {\r\n                    return (\r\n                    '<b>'+this.x+' Marks Data<b/>'+\r\n                      '<br/>Max: ' +\r\n                      this.point.high +\r\n                      '<br/> Q3: ' +\r\n                      this.point.q3 +\r\n                      '<br/>Median: ' +\r\n                      this.point.median +\r\n                      '<br/>Q1: ' +\r\n                      this.point.q1 +\r\n                      '<br/>Min: ' +\r\n                      this.point.low +\r\n                      ''\r\n                    );\r\n                  }\r\n                }\r\n              },\r\n            series: [{\r\n                name: 'Subject',\r\n                data: [\r\n                    \r\n                ],\r\n                tooltip: {\r\n                    headerFormat: '<em>Experiment No {point.key}</em><br/>'\r\n                }\r\n            },\r\n            {\r\n                name: 'Student',\r\n                color: 'rgb(255,0,0)',\r\n                type: 'scatter',\r\n                data: [ // x, y positions where 0 is the first category\r\n                    \r\n                ],\r\n                marker: {\r\n                    fillColor: 'white',\r\n                    lineWidth: 1,\r\n                    lineColor: 'rgb(255,0,0)'\r\n                },\r\n                tooltip: {\r\n                    pointFormat: '{point.value}'\r\n                }\r\n            }],\r\n            plotOptions: {\r\n                    // series: {\r\n                    //     animation: {\r\n                    //         duration: 1000\r\n                    //     }\r\n                    // },\r\n                scatter: {\r\n                    marker: {\r\n                        radius: 2,\r\n                        symbol: 'circle',\r\n                        states: {\r\n                            hover: {\r\n                                enabled: true,\r\n                                lineColor: 'rgb(255,0,0)'\r\n                            }\r\n                        }\r\n                    },\r\n                    states: {\r\n                        hover: {\r\n                            marker: {\r\n                                enabled: false\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n        }\r\n    }\r\n    //prepare line chart data\r\n    static lineChart(data){\r\n        return {\r\n            chart: {\r\n                zoomType: 'xy'\r\n            },\r\n            title: {\r\n                text: 'Student subject and marks'\r\n            },\r\n            xAxis: [{\r\n                categories: [],\r\n                crosshair: true\r\n            }],\r\n            yAxis: [{ // Primary yAxis\r\n               \r\n                title: {\r\n                    text: 'Marks',\r\n                    style: {\r\n                        color:'rgb(255,0,0)'\r\n                    }\r\n                }\r\n            }, { // Secondary yAxis\r\n                title: {\r\n                    text: 'Avarage',\r\n                    style: {\r\n                        color:'rgb(255,0,0)'\r\n                    },\r\n                    \r\n                },\r\n                \r\n                opposite: true\r\n            }],\r\n            tooltip: {\r\n                shared: true\r\n            },\r\n            legend: {\r\n                layout: 'vertical',\r\n                align: 'left',\r\n                x: 120,\r\n                verticalAlign: 'top',\r\n                y: 100,\r\n                floating: true,\r\n                backgroundColor:\r\n                    // Highcharts.defaultOptions.legend.backgroundColor || // theme\r\n                    'rgba(255,255,255,0.25)'\r\n            },\r\n            series: [{\r\n                name: 'Marks',\r\n                type: 'column',\r\n                yAxis: 1,\r\n                data: [],\r\n                tooltip: {\r\n                    valueSuffix: ''\r\n                }\r\n        \r\n            }, {\r\n                name: 'Avarage',\r\n                type: 'spline',\r\n                data: [],\r\n                tooltip: {\r\n                    valueSuffix: ''\r\n                }\r\n            }]\r\n        }\r\n    }\r\n\r\n    //Prepare every student marks\r\n    static prepareMarksPoints(data){\r\n        let temArray = [];\r\n        for(let i = 0; i < data.length; i++){\r\n            for(let j = 0; j < data[i].marks.length; j++){\r\n                temArray.push([getRandomInt(-0.1,0.1)+i, data[i].marks[j]]);\r\n            }\r\n        }\r\n        console.info(temArray);\r\n        return temArray;\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction  quantile(arr, q){\r\n    const sorted = arr;\r\n    const pos = (sorted.length - 1) * q;\r\n    const base = Math.floor(pos);\r\n    const rest = pos - base;\r\n    if (sorted[base + 1] !== undefined) {\r\n        return sorted[base] + rest * (sorted[base + 1] - sorted[base]);\r\n    } else {\r\n        return sorted[base];\r\n    }\r\n};\r\n\r\nfunction getRandomInt(min, max) {\r\n    return (Math.random() * (max - min)) + min;\r\n}","D:\\Home\\student_managment\\client\\src\\component\\third_question.js",["71","72","73","74","75","76","77"],"import ReactHighchart from 'react-highcharts';\r\nimport chartApi from '../api/chart'\r\nimport { Container, Row, Col, Spinner } from 'react-bootstrap';\r\nimport React, { Component } from \"react\";\r\nimport Navigation from '../component/nav';\r\nimport App from '../helper/app';\r\nimport '../App.css'\r\n\r\nexport default class ThirdQuestion extends Component {\r\n    state = {\r\n        filterVal: { student: 1, year: \"2010\", subjects: [\"Subject1\", \"Subject2\", \"Subject3\", \"Subject4\", \"Subject5\"] },\r\n        charData: App.boxPlotChart({}),\r\n        loading: false\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.filterData();\r\n    }\r\n    getStudentId = (studentId) => {\r\n        this.state.filterVal.student = studentId\r\n    };\r\n    getyear = (year) => {\r\n        this.state.filterVal.year = year;\r\n    }\r\n    getSubject = (subjects) => {\r\n        this.state.filterVal.subjects = subjects;\r\n    }\r\n    getFilterData = () => {\r\n        this.filterData();\r\n    }\r\n    filterData = () => {\r\n        this.setState({ loading: true });\r\n\r\n        chartApi.getStudentDataByStudentId(this.state.filterVal.student).then(data => {\r\n            // console.info(data);\r\n            this.setState({ loading: false });\r\n            if (data != undefined &&  data.data && data.data.result) {\r\n                // let preparedData = App.groupBySubject(data.data.result);\r\n                let years = [];\r\n                let marks = [];\r\n\r\n                let yearData = data.data.result;\r\n                //Update the chart for new data\r\n                let chart = this.refs.chart.getChart();\r\n                console.info(yearData.year)\r\n                chart.series[1].setData(yearData.marks);\r\n                chart.xAxis[0].setCategories(yearData.year);\r\n                chart.redraw();\r\n            }\r\n        });\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col sm={2} id=\"sidebar-wrapper\">\r\n                        <Navigation clickStudent={this.getStudentId} clickFilter={this.getFilterData} clickYear={this.getyear} clickSubject={this.getSubject} />\r\n                    </Col>\r\n                    {this.state.loading}\r\n                    <Col sm={10} id=\"page-content-wrapper\">\r\n                        {this.state.loading ?\r\n\r\n                            <Spinner animation=\"border\" role=\"status\" className=\"loading_center\" size=\"50\">\r\n                                <span className=\"sr-only \">Loading...</span>\r\n                            </Spinner> :\r\n                            <ReactHighchart config={this.state.charData} ref=\"chart\" />\r\n                        }\r\n\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n",{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":9,"column":31,"nodeType":"84","messageId":"85","endLine":9,"endColumn":38},{"ruleId":"82","severity":1,"message":"86","line":26,"column":7,"nodeType":"84","messageId":"85","endLine":26,"endColumn":11},{"ruleId":"87","severity":1,"message":"88","line":19,"column":5,"nodeType":"89","messageId":"90","endLine":22,"endColumn":6},{"ruleId":"91","severity":1,"message":"92","line":27,"column":9,"nodeType":"93","endLine":27,"endColumn":29},{"ruleId":"91","severity":1,"message":"92","line":30,"column":9,"nodeType":"93","endLine":30,"endColumn":29},{"ruleId":"91","severity":1,"message":"92","line":33,"column":9,"nodeType":"93","endLine":33,"endColumn":29},{"ruleId":"94","severity":1,"message":"95","line":44,"column":22,"nodeType":"96","messageId":"97","endLine":44,"endColumn":24},{"ruleId":"82","severity":1,"message":"98","line":2,"column":8,"nodeType":"84","messageId":"85","endLine":2,"endColumn":21},{"ruleId":"87","severity":1,"message":"88","line":17,"column":3,"nodeType":"89","messageId":"90","endLine":20,"endColumn":4},{"ruleId":"91","severity":1,"message":"92","line":25,"column":5,"nodeType":"93","endLine":25,"endColumn":25},{"ruleId":"91","severity":1,"message":"92","line":28,"column":5,"nodeType":"93","endLine":28,"endColumn":25},{"ruleId":"91","severity":1,"message":"92","line":31,"column":5,"nodeType":"93","endLine":31,"endColumn":25},{"ruleId":"94","severity":1,"message":"95","line":41,"column":16,"nodeType":"96","messageId":"97","endLine":41,"endColumn":18},{"ruleId":"82","severity":1,"message":"99","line":48,"column":15,"nodeType":"84","messageId":"85","endLine":48,"endColumn":26},{"ruleId":"82","severity":1,"message":"100","line":3,"column":10,"nodeType":"84","messageId":"85","endLine":3,"endColumn":13},{"ruleId":"82","severity":1,"message":"101","line":3,"column":15,"nodeType":"84","messageId":"85","endLine":3,"endColumn":18},{"ruleId":"82","severity":1,"message":"102","line":3,"column":59,"nodeType":"84","messageId":"85","endLine":3,"endColumn":66},{"ruleId":"94","severity":1,"message":"103","line":98,"column":66,"nodeType":"96","messageId":"97","endLine":98,"endColumn":68},{"ruleId":"82","severity":1,"message":"104","line":2,"column":8,"nodeType":"84","messageId":"85","endLine":2,"endColumn":14},{"ruleId":"105","severity":1,"message":"106","line":30,"column":17,"nodeType":"107","messageId":"108","endLine":30,"endColumn":23},{"ruleId":"87","severity":1,"message":"88","line":16,"column":5,"nodeType":"89","messageId":"90","endLine":19,"endColumn":6},{"ruleId":"91","severity":1,"message":"92","line":24,"column":9,"nodeType":"93","endLine":24,"endColumn":29},{"ruleId":"91","severity":1,"message":"92","line":27,"column":9,"nodeType":"93","endLine":27,"endColumn":29},{"ruleId":"91","severity":1,"message":"92","line":30,"column":9,"nodeType":"93","endLine":30,"endColumn":29},{"ruleId":"94","severity":1,"message":"95","line":41,"column":22,"nodeType":"96","messageId":"97","endLine":41,"endColumn":24},{"ruleId":"82","severity":1,"message":"109","line":43,"column":21,"nodeType":"84","messageId":"85","endLine":43,"endColumn":26},{"ruleId":"82","severity":1,"message":"110","line":44,"column":21,"nodeType":"84","messageId":"85","endLine":44,"endColumn":26},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'Spinner' is defined but never used.","Identifier","unusedVar","'Home' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'HighchartMore' is defined but never used.","'sortedMarks' is assigned a value but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'NavItem' is defined but never used.","Expected '===' and instead saw '=='.","'config' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'years' is assigned a value but never used.","'marks' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]